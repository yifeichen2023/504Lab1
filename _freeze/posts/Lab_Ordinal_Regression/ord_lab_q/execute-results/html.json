{
  "hash": "bd11521b593af229048a741553f14193",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Lab: Ordinal Regression\"\nsubtitle: \"Princeton University\"\nauthor: \"Yifei Chen\"\noutput: \n  tufte::tufte_html:\n    css: \n    tufte_variant: \"envisioned\"\n    highlight: github-dark\n    fig_height: 10\n    fig_width: 16\n    toc: true\n    toc_depth: 1\nexecute: \n  message: false\n  warning: false\nformat: \n  html:\n    code-fold: true\n    code-overflow: wrap\nengine: knitr\n---\n\n\n\n\n# Lab 3- Ordinal Regression\n\n## Instructions\n\n-   If you are fitting a model, display the model output in a neatly formatted table. (The `tidy` and `kable` functions can help!)\n\n-   If you are creating a plot, use clear labels for all axes, titles, etc.\n\n-   If you are using Github, don't forget to commit and push your work to to it regularly, at least after each exercise. Write short and informative commit messages.\n    Else, if you are submitting on Canvas, make sure that the version you submit is the latest, and that it runs/knits without any errors. \n\n-   When you're done, we should be able to knit the final version of the QMD in your GitHub as a HTML.\n\n# Lab\n\nThe data for this week's lab is taken from the Great British Bake-off (GBBO, https://bakeoff.netlify.app/). In this lab you will be looking at `Gender` and `Age` as a predictor of technical rank. For this exercise, we will only be looking at those who were in top 3 of technical.\n\nIn the GBBO, the bakers are usually provided with a list of ingredients and basic instructions, but they may not have access to specific measurements or details on how to prepare the ingredients. The judges evaluate the bakers' finished products based on factors such as appearance, texture, and flavor, but also compare the bakers' results to a standard version of the recipe that has been prepared in advance by the judges or a baking expert.\n\nThe dataset contains 3 variables:\n\n-   `Gender`: M = MALE, F = FEMALE\n\n-   `Age`: Age of baker\n\n-   `Technical Rank`: Rank in technical (1,2,3)\n\n## Load packages:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(broom)\nlibrary(performance)\nlibrary(ordinal) #clm\nlibrary(car) # anova\nlibrary(ggeffects) #  viz\nlibrary(gofcat) # brant\nlibrary(brms)\nlibrary(emmeans) # contrasts\nlibrary(knitr)\nlibrary(effects)\n```\n:::\n\n\n\n## Load data\n\n-   Make sure only the top 3 ranks are being used. *For some reason, there are missing ranks (my guess is they did not announce rank on TV)*\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngbbo <- read_csv(\"https://raw.githubusercontent.com/suyoghc/PSY-504_Spring-2025/refs/heads/main/Ordinal%20Regression/data/GBBO.csv\")\n\n# Enter code to filter. Think about the data type that would be relevant for Rank\ngb <- gbbo %>% filter(`Technical Rank` %in% c(1, 2, 3))\n```\n:::\n\n\n\n## Explore\n\n-   Plot two figures showing the percentage of bakers in each rank--- create one for `Gender` and `Age`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Gender\ngb %>%\n  group_by(Gender, `Technical Rank`) %>%\n  summarise(count = n(), .groups = \"drop\") %>%\n  group_by(Gender) %>%\n  mutate(percentage = count / sum(count) * 100) %>%\n  ggplot(aes(x = factor(`Technical Rank`, levels = c(1,2,3)), y = percentage, fill = Gender)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(title = \"% of Bakers by Technical Rank and Gender\",\n       x = \"Technical Rank\",\n       y = \"%\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](ord_lab_q_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    c(min(gb$Age), max(gb$Age))\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] 17 66\n    ```\n    \n    \n    :::\n    :::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot percentage of bakers in each rank by Age group\ngb %>%\n  mutate(AgeGroup = cut(Age, breaks = c(10, 20, 30, 40, 50, 60, 70), \n                         labels = c(\"10-20\", \"21-30\", \"31-40\", \"41-50\", \"51-60\", \"61-70\"))) %>%\n  group_by(AgeGroup, `Technical Rank`) %>%\n  summarise(count = n(), .groups = \"drop\") %>%\n  group_by(AgeGroup) %>%\n  mutate(percentage = count / sum(count) * 100) %>%\n  ggplot(aes(x = factor(`Technical Rank`, levels = c(1,2,3)), y = percentage, fill = AgeGroup)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(title = \"% of Bakers by Technical Rank and Age Group\",\n       x = \"Technical Rank\",\n       y = \"%\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](ord_lab_q_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n## Ordinal Analysis\n\n-   If you haven't already, convert the outcome variable to an ordered factor. What does the order here represent?\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    gb <- gb %>%\n      mutate(`Technical Rank` = factor(`Technical Rank`, levels = c(1, 2, 3), ordered = TRUE))\n    \n    gb <- gb %>%\n      rename(TechnicalRank = `Technical Rank`)\n    ```\n    :::\n\n\n\n-   Convert input variables to categorical factors as appropriate.\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    gb <- gb %>%\n      mutate(Gender = factor(Gender))\n      \n    gb <- gb %>%\n      mutate(AgeGroup = cut(Age, breaks = c(10, 20, 30, 40, 50, 60, 70), \n                         labels = c(\"10-20\", \"21-30\", \"31-40\", \"41-50\", \"51-60\", \"61-70\")))\n    gb <- gb %>%\n      mutate(AgeGroup = factor(AgeGroup, levels = c(\"10-20\", \"21-30\", \"31-40\", \"41-50\", \"51-60\", \"61-70\"), ordered = TRUE))\n    ```\n    :::\n\n\n\n-   Run a ordinal logistic regression model against all relevant input variables. Interpret the effects for `Gender`, `Age` and `Gender*Age` (even if they are non-significant).\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # Fit ordinal logistic regression model with interaction\n    model <- clm(`TechnicalRank` ~ Gender * AgeGroup, data = gb)\n    \n    # Summary of results\n    summary(model)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    formula: TechnicalRank ~ Gender * AgeGroup\n    data:    gb\n    \n     link  threshold nobs logLik  AIC    niter max.grad cond.H \n     logit flexible  309  -336.25 698.51 3(0)  4.79e-08 1.5e+02\n    \n    Coefficients:\n                         Estimate Std. Error z value Pr(>|z|)\n    GenderM             0.4258889  0.2760282   1.543    0.123\n    AgeGroup.L         -0.8131945  0.5175910  -1.571    0.116\n    AgeGroup.Q         -0.0543235  0.4511328  -0.120    0.904\n    AgeGroup.C          0.0235687  0.4870448   0.048    0.961\n    AgeGroup^4          0.1525125  0.4653856   0.328    0.743\n    AgeGroup^5         -0.0002774  0.3549649  -0.001    0.999\n    GenderM:AgeGroup.L  1.2384302  0.7812882   1.585    0.113\n    GenderM:AgeGroup.Q -0.1792456  0.6928953  -0.259    0.796\n    GenderM:AgeGroup.C -0.6652193  0.7046513  -0.944    0.345\n    GenderM:AgeGroup^4 -0.5504877  0.6569129  -0.838    0.402\n    GenderM:AgeGroup^5 -0.2378061  0.5126122  -0.464    0.643\n    \n    Threshold coefficients:\n        Estimate Std. Error z value\n    1|2  -0.4887     0.1945  -2.513\n    2|3   0.9352     0.1999   4.678\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n-   Test if the interaction is warranted\n\n#Hint: You need to create two models with clm(); one with interaction and one without.\n#Then you compare them using the anova test using anova()\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    model_no_int <- clm(TechnicalRank ~ Gender + AgeGroup, data = gb)\n    model_int <- clm(TechnicalRank ~ Gender * AgeGroup, data = gb)\n    \n    anova(model_no_int, model_int)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    Likelihood ratio tests of cumulative link models:\n     \n                 formula:                          link: threshold:\n    model_no_int TechnicalRank ~ Gender + AgeGroup logit flexible  \n    model_int    TechnicalRank ~ Gender * AgeGroup logit flexible  \n    \n                 no.par    AIC  logLik LR.stat df Pr(>Chisq)\n    model_no_int      8 692.73 -338.37                      \n    model_int        13 698.51 -336.25  4.2215  5      0.518\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n-   Use `ggemmeans` to create a figure showing the interaction between `Gender` and `Age` as a function of rank. Plot predicted probabilities from the model.\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # Compute predicted probabilities\n    em <- ggemmeans(model, terms = c(\"AgeGroup\", \"Gender\"))\n    em_df <- as.data.frame(em)\n    \n    # Age Group\n    ggplot(em_df, aes(x = response.level, y = predicted, fill = x)) +\n      geom_bar(stat = \"identity\", position = \"dodge\") +\n      labs(\n    title = \"Effect of Age Group on Technical Rank\",\n    x = \"Technical Rank\",\n    y = \"Predicted Probability\",\n    fill = \"Age Group\"\n      ) +\n      theme_minimal()\n    ```\n    \n    ::: {.cell-output-display}\n    ![](ord_lab_q_files/figure-html/unnamed-chunk-10-1.png){width=672}\n    :::\n    :::\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # Gender \n    ggplot(em_df, aes(x = response.level, y = predicted, fill = group)) +\n      geom_bar(stat = \"identity\", position = \"dodge\") +\n      labs(\n    title = \"Effect of Gender on Technical Rank\",\n    x = \"Technical Rank\",\n    y = \"Predicted Probability\",\n    fill = \"Gender\"\n      ) +\n      theme_minimal()\n    ```\n    \n    ::: {.cell-output-display}\n    ![](ord_lab_q_files/figure-html/unnamed-chunk-11-1.png){width=672}\n    :::\n    :::\n\n\n\n### Latent Visualization\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(gb)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n Gender       Age        TechnicalRank  AgeGroup \n F:173   Min.   :17.00   1:103         10-20:35  \n M:136   1st Qu.:27.00   2:104         21-30:95  \n         Median :31.00   3:102         31-40:94  \n         Mean   :34.54                 41-50:50  \n         3rd Qu.:41.00                 51-60:17  \n         Max.   :66.00                 61-70:18  \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nols_clm = MASS::polr(TechnicalRank~Gender*Age, data=gb, Hess = TRUE)\n\nggeffect(ols_clm, c(\"Age[all]\", \"Gender\"), latent=TRUE) %>% plot()\n```\n\n::: {.cell-output-display}\n![](ord_lab_q_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n-   Use the Brant test to support or reject the hypothesis that the proportional odds assumption holds for your simplified model.\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    brant.test(ols_clm)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    \n    Brant Test:\n                   chi-sq   df   pr(>chi)\n    Omnibus         1.295    3       0.73\n    GenderM         0.585    1       0.44\n    Age             0.065    1       0.80\n    GenderM:Age     0.924    1       0.34\n    \n    H0: Proportional odds assumption holds\n    ```\n    \n    \n    :::\n    :::\n\n\n\n    ## `brms`\n\n-   Below is a model implementation using the `brms` package. We will just use the default priors for this. \nThe exercise is to run this code and note your observations. \nWhat are salient differences you observe in how the model fitting takes place\nWith respect to the results, how do you compare the results of the model you fit with `clm` and the one you fit with `brms`?\n\nIt is very similar as what we have from CLM.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  ols2_brm = brm(TechnicalRank ~  Gender*Age, data=gb, family = cumulative, cores = 4,chains = 4)\n```\n:::\n\n\n\n-  The `conditional_effects` function is used to plot predicted probabilities by Gender and Age across each rank. \n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    conditional_effects(ols2_brm, categorical = T)\n    ```\n    \n    ::: {.cell-output-display}\n    ![](ord_lab_q_files/figure-html/unnamed-chunk-16-1.png){width=672}\n    :::\n    \n    ::: {.cell-output-display}\n    ![](ord_lab_q_files/figure-html/unnamed-chunk-16-2.png){width=672}\n    :::\n    :::\n\n\n\n- `check_predictions` from the `easystats` `performance` package is used for examining model fit (i.e., does the data fit the model being used?). \nRun the below code. What do you think?\n\nIt is really good and capture to real data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_predictions(ols2_brm)\n```\n\n::: {.cell-output-display}\n![](ord_lab_q_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "ord_lab_q_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}