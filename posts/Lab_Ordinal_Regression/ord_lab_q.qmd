---
title: "Ordinal Regression Lab Answers"
output: 
  tufte::tufte_html:
    css: 
    tufte_variant: "envisioned"
    highlight: github-dark
    fig_height: 10
    fig_width: 16
    toc: true
    toc_depth: 1
execute: 
  message: false
  warning: false
format: 
  html:
    code-fold: true
    code-overflow: wrap
engine: knitr
---

# Lab 3- Ordinal Regression

## Instructions

-   If you are fitting a model, display the model output in a neatly formatted table. (The `tidy` and `kable` functions can help!)

-   If you are creating a plot, use clear labels for all axes, titles, etc.

-   If you are using Github, don't forget to commit and push your work to to it regularly, at least after each exercise. Write short and informative commit messages.
    Else, if you are submitting on Canvas, make sure that the version you submit is the latest, and that it runs/knits without any errors. 

-   When you're done, we should be able to knit the final version of the QMD in your GitHub as a HTML.

# Lab

The data for this week's lab is taken from the Great British Bake-off (GBBO, https://bakeoff.netlify.app/). In this lab you will be looking at `Gender` and `Age` as a predictor of technical rank. For this exercise, we will only be looking at those who were in top 3 of technical.

In the GBBO, the bakers are usually provided with a list of ingredients and basic instructions, but they may not have access to specific measurements or details on how to prepare the ingredients. The judges evaluate the bakers' finished products based on factors such as appearance, texture, and flavor, but also compare the bakers' results to a standard version of the recipe that has been prepared in advance by the judges or a baking expert.

The dataset contains 3 variables:

-   `Gender`: M = MALE, F = FEMALE

-   `Age`: Age of baker

-   `Technical Rank`: Rank in technical (1,2,3)

## Load packages:

```{r}
library(tidyverse)
library(broom)
library(performance)
library(ordinal) #clm
library(car) # anova
library(ggeffects) #  viz
library(gofcat) # brant
library(brms)
library(emmeans) # contrasts
library(knitr)
library(effects)

```

## Load data

-   Make sure only the top 3 ranks are being used. *For some reason, there are missing ranks (my guess is they did not announce rank on TV)*

```{r}

gbbo <- read_csv("https://raw.githubusercontent.com/suyoghc/PSY-504_Spring-2025/refs/heads/main/Ordinal%20Regression/data/GBBO.csv")

# Enter code to filter. Think about the data type that would be relevant for Rank
gb <- gbbo %>% filter(`Technical Rank` %in% c(1, 2, 3))

```

## Explore

-   Plot two figures showing the percentage of bakers in each rank--- create one for `Gender` and `Age`

```{r}
# Gender
gb %>%
  group_by(Gender, `Technical Rank`) %>%
  summarise(count = n(), .groups = "drop") %>%
  group_by(Gender) %>%
  mutate(percentage = count / sum(count) * 100) %>%
  ggplot(aes(x = factor(`Technical Rank`, levels = c(1,2,3)), y = percentage, fill = Gender)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(title = "% of Bakers by Technical Rank and Gender",
       x = "Technical Rank",
       y = "%") +
  theme_minimal()

```
    ```{r}
c(min(gb$Age), max(gb$Age))
    ```
    
```{r}
# Plot percentage of bakers in each rank by Age group
gb %>%
  mutate(AgeGroup = cut(Age, breaks = c(10, 20, 30, 40, 50, 60, 70), 
                         labels = c("10-20", "21-30", "31-40", "41-50", "51-60", "61-70"))) %>%
  group_by(AgeGroup, `Technical Rank`) %>%
  summarise(count = n(), .groups = "drop") %>%
  group_by(AgeGroup) %>%
  mutate(percentage = count / sum(count) * 100) %>%
  ggplot(aes(x = factor(`Technical Rank`, levels = c(1,2,3)), y = percentage, fill = AgeGroup)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(title = "% of Bakers by Technical Rank and Age Group",
       x = "Technical Rank",
       y = "%") +
  theme_minimal()

```

## Ordinal Analysis

-   If you haven't already, convert the outcome variable to an ordered factor. What does the order here represent?

    ```{r}
gb <- gb %>%
  mutate(`Technical Rank` = factor(`Technical Rank`, levels = c(1, 2, 3), ordered = TRUE))
    
gb <- gb %>%
  rename(TechnicalRank = `Technical Rank`)
    ```

-   Convert input variables to categorical factors as appropriate.

    ```{r}
gb <- gb %>%
  mutate(Gender = factor(Gender))
  
gb <- gb %>%
  mutate(AgeGroup = cut(Age, breaks = c(10, 20, 30, 40, 50, 60, 70), 
                         labels = c("10-20", "21-30", "31-40", "41-50", "51-60", "61-70")))
gb <- gb %>%
  mutate(AgeGroup = factor(AgeGroup, levels = c("10-20", "21-30", "31-40", "41-50", "51-60", "61-70"), ordered = TRUE))
    ```

-   Run a ordinal logistic regression model against all relevant input variables. Interpret the effects for `Gender`, `Age` and `Gender*Age` (even if they are non-significant).

    ```{r}
# Fit ordinal logistic regression model with interaction
model <- clm(`TechnicalRank` ~ Gender * AgeGroup, data = gb)

# Summary of results
summary(model)
    ```


-   Test if the interaction is warranted

#Hint: You need to create two models with clm(); one with interaction and one without.
#Then you compare them using the anova test using anova()

    ```{r}
model_no_int <- clm(TechnicalRank ~ Gender + AgeGroup, data = gb)
model_int <- clm(TechnicalRank ~ Gender * AgeGroup, data = gb)

anova(model_no_int, model_int)
    ```


-   Use `ggemmeans` to create a figure showing the interaction between `Gender` and `Age` as a function of rank. Plot predicted probabilities from the model.

    ```{r}
# Compute predicted probabilities
em <- ggemmeans(model, terms = c("AgeGroup", "Gender"))
em_df <- as.data.frame(em)

# Age Group
ggplot(em_df, aes(x = response.level, y = predicted, fill = x)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(
    title = "Effect of Age Group on Technical Rank",
    x = "Technical Rank",
    y = "Predicted Probability",
    fill = "Age Group"
  ) +
  theme_minimal()
    ```
    ```{r}
# Gender 
ggplot(em_df, aes(x = response.level, y = predicted, fill = group)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(
    title = "Effect of Gender on Technical Rank",
    x = "Technical Rank",
    y = "Predicted Probability",
    fill = "Gender"
  ) +
  theme_minimal()
    ```

### Latent Visualization
```{r}
summary(gb)
```
```{r}

ols_clm = MASS::polr(TechnicalRank~Gender*Age, data=gb, Hess = TRUE)

ggeffect(ols_clm, c("Age[all]", "Gender"), latent=TRUE) %>% plot()

```

-   Use the Brant test to support or reject the hypothesis that the proportional odds assumption holds for your simplified model.

    ```{r}

    brant.test(ols_clm)

    ```

    ## `brms`

-   Below is a model implementation using the `brms` package. We will just use the default priors for this. 
The exercise is to run this code and note your observations. 
What are salient differences you observe in how the model fitting takes place
With respect to the results, how do you compare the results of the model you fit with `clm` and the one you fit with `brms`?

It is very similar as what we have from CLM.

```{r}
#| results: hide
#| 
  ols2_brm = brm(TechnicalRank ~  Gender*Age, data=gb, family = cumulative, cores = 4,chains = 4)
```

-  The `conditional_effects` function is used to plot predicted probabilities by Gender and Age across each rank. 

    ```{r}
    conditional_effects(ols2_brm, categorical = T)
    ```

- `check_predictions` from the `easystats` `performance` package is used for examining model fit (i.e., does the data fit the model being used?). 
Run the below code. What do you think?

It is really good and capture to real data.

```{r}
check_predictions(ols2_brm)
```
